import pytest
import numpy as np
import pandas as pd
import geopandas as gp

from src.dataset.spatial_dataset import SpatialDataset
from src.dataset.interfaces.spatial_dataset import FieldInfo
from src.kernel.gwr_kernel import GwrKernel
from src.log.gwr_logger import GwrLogger


@pytest.fixture
def euclidean_dataset():
    georgia_data = pd.read_csv(r'./data/GData_utm.csv')
    georgia_shp = gp.read_file(r'./data/G_utm.shp')

    spatialDataset = SpatialDataset(
        georgia_data,
        FieldInfo(
            predictor_fields=['PctBach', 'PctEld', 'TotPop90'],
            response_field='PctPov',
            coordinate_x_field='X',
            coordinate_y_field='Y'
        ),
        geometry=georgia_shp,
        isSpherical=False,
        useIntercept=True,
        isStandardize=True
    )
    return spatialDataset


def test_gwr_kernel_euclidean_triangular(euclidean_dataset):
    gwrKernel = GwrKernel(euclidean_dataset, 'triangular')
    gwrKernel.update_bandwidth(100)
    wi = gwrKernel.get_weighted_matrix_by_id(0)
    expected_wi = np.array([
        [1.00000000e+00],
        [7.22528174e-01],
        [9.11239286e-01],
        [1.74205208e-01],
        [3.00686436e-01],
        [-2.73508355e-01],
        [-1.61604041e-01],
        [-4.91609931e-01],
        [6.78837491e-01],
        [5.96336861e-01],
        [2.84568589e-01],
        [4.99901924e-01],
        [7.16438865e-01],
        [3.79660854e-01],
        [6.38470335e-01],
        [6.09991747e-01],
        [3.74586145e-01],
        [6.79682368e-02],
        [1.04356689e-01],
        [5.60100243e-01],
        [6.70595100e-01],
        [-3.31632156e-01],
        [-7.84031514e-01],
        [6.25157801e-01],
        [4.94523860e-01],
        [4.63090976e-03],
        [-6.81417588e-01],
        [-4.01949309e-01],
        [-8.40429012e-02],
        [-1.21274185e-02],
        [-1.17893319e-01],
        [5.93571357e-01],
        [-3.11111394e-01],
        [7.73316664e-01],
        [3.93177875e-01],
        [1.79183518e-01],
        [4.88068437e-01],
        [-1.97673758e-01],
        [2.30480118e-01],
        [4.40282056e-01],
        [-8.50813550e-01],
        [-3.94598994e-01],
        [5.16488172e-02],
        [-1.49839492e-01],
        [6.14077444e-01],
        [3.95288260e-01],
        [2.65038974e-01],
        [-2.87422260e-01],
        [-6.65844216e-05],
        [4.72914929e-01],
        [5.20109433e-01],
        [-1.09583814e-01],
        [6.11375817e-01],
        [7.38234918e-01],
        [-6.37703500e-01],
        [-1.29920347e-01],
        [-5.85167788e-01],
        [-3.11041236e-01],
        [-2.57254361e-01],
        [-2.14380803e-01],
        [-5.75726883e-01],
        [3.14642327e-01],
        [6.04951453e-01],
        [-5.90901385e-01],
        [1.69537466e-01],
        [1.06189134e-01],
        [-2.10612800e-01],
        [-3.96825024e-01],
        [-3.01377426e-01],
        [2.57253972e-01],
        [-4.41460981e-01],
        [-9.23238336e-02],
        [-2.17101922e-01],
        [-2.80312746e-01],
        [-3.09665380e-02],
        [4.07237487e-01],
        [6.42253309e-01],
        [-1.91183173e-01],
        [1.02006340e-01],
        [8.88465764e-01],
        [3.96353495e-01],
        [5.00098876e-01],
        [5.57952873e-01],
        [2.49476788e-01],
        [7.63563013e-02],
        [5.65294721e-01],
        [6.06799569e-01],
        [2.99600650e-01],
        [6.92890094e-01],
        [5.01033995e-02],
        [7.40776090e-01],
        [4.75852756e-01],
        [-4.48584713e-01],
        [1.96807291e-01],
        [6.24713138e-01],
        [2.78808455e-01],
        [-1.45078063e-01],
        [1.07963561e-01],
        [-8.61495651e-02],
        [3.35644412e-02],
        [2.30417173e-01],
        [1.59376917e-01],
        [7.90991637e-01],
        [6.71530377e-02],
        [-6.64551373e-01],
        [-3.42098383e-02],
        [-1.30399854e-02],
        [-4.25613351e-02],
        [-1.46630200e-02],
        [-3.97840707e-01],
        [3.12328291e-01],
        [-4.64662084e-01],
        [8.29833746e-01],
        [9.99999901e-08],
        [-4.98557164e-01],
        [5.21147808e-01],
        [1.77039026e-01],
        [-4.28522354e-02],
        [-4.84655363e-01],
        [6.18814371e-02],
        [2.76576926e-01],
        [-8.38072466e-02],
        [2.02882714e-01],
        [4.44847050e-01],
        [-5.31669487e-02],
        [-1.54810341e-02],
        [-3.15412363e-01],
        [1.60279702e-02],
        [2.60677393e-01],
        [5.49503908e-02],
        [1.64736319e-01],
        [8.19059263e-01],
        [1.74588864e-01],
        [7.51416419e-01],
        [1.87265023e-01],
        [2.75237874e-01],
        [5.29336470e-01],
        [8.12256034e-01],
        [-5.53034227e-01],
        [6.85651336e-01],
        [-2.02538186e-01],
        [4.99377652e-01],
        [3.89690072e-01],
        [-5.36245811e-01],
        [8.75446839e-02],
        [-7.50196269e-01],
        [-7.38337395e-02],
        [6.92097135e-01],
        [2.53019454e-01],
        [4.46307124e-01],
        [7.82525283e-01],
        [1.35210132e-01],
        [7.55929288e-01],
        [-4.36009966e-01],
        [-7.18852940e-01],
        [5.73056175e-01],
        [4.34871236e-02],
        [4.16130538e-01],
        [4.07798160e-01]
    ])
    np.testing.assert_array_almost_equal(
        wi, expected_wi, decimal=2)


def test_gwr_kernel_euclidean_uniform(euclidean_dataset):
    gwrKernel = GwrKernel(euclidean_dataset, 'uniform')
    gwrKernel.update_bandwidth(100)
    wi = gwrKernel.get_weighted_matrix_by_id(0)
    expected_wi = np.full_like(wi, 0.5)
    np.testing.assert_array_almost_equal(
        wi, expected_wi, decimal=2)


def test_gwr_kernel_euclidean_gaussian(euclidean_dataset):
    gwrKernel = GwrKernel(euclidean_dataset, 'gaussian')
    gwrKernel.update_bandwidth(100)
    wi = gwrKernel.get_weighted_matrix_by_id(0)
    expected_wi = np.array([
        [1],
        [0.96223622],
        [0.99606852],
        [0.71108129],
        [0.78308054],
        [0.44445264],
        [0.50932856],
        [0.3287525],
        [0.94973462],
        [0.92175855],
        [0.77420309],
        [0.88245362],
        [0.96059398],
        [0.82496829],
        [0.93673781],
        [0.92676688],
        [0.82236475],
        [0.64769096],
        [0.66959082],
        [0.90777757],
        [0.94719168],
        [0.41204525],
        [0.20364353],
        [0.93215764],
        [0.88007067],
        [0.60933943],
        [0.24327019],
        [0.37428755],
        [0.55567343],
        [0.59917537],
        [0.53534561],
        [0.92072662],
        [0.42337095],
        [0.97463458],
        [0.83183885],
        [0.71400176],
        [0.87718535],
        [0.4881116],
        [0.74372761],
        [0.85501002],
        [0.18036812],
        [0.37815422],
        [0.63782905],
        [0.51630096],
        [0.92823708],
        [0.83290296],
        [0.76331548],
        [0.43660428],
        [0.60649027],
        [0.87030693],
        [0.8912347],
        [0.54032303],
        [0.9272664],
        [0.96631977],
        [0.26157444],
        [0.5281579],
        [0.28468315],
        [0.42340989],
        [0.45368858],
        [0.47837498],
        [0.28896272],
        [0.79068346],
        [0.92493513],
        [0.28210284],
        [0.70833792],
        [0.67068954],
        [0.48056553],
        [0.37698116],
        [0.42878845],
        [0.75893751],
        [0.35384197],
        [0.55068866],
        [0.47679505],
        [0.4406077],
        [0.58775446],
        [0.83888328],
        [0.93801312],
        [0.49191041],
        [0.66818092],
        [0.99379936],
        [0.83343918],
        [0.88254053],
        [0.90691837],
        [0.75454335],
        [0.65275146],
        [0.90984198],
        [0.92560908],
        [0.78248571],
        [0.95393643],
        [0.63689417],
        [0.96695964],
        [0.87165187],
        [0.35021822],
        [0.72429301],
        [0.93200219],
        [0.77100639],
        [0.51912951],
        [0.67175304],
        [0.55440465],
        [0.62688081],
        [0.74369159],
        [0.70234989],
        [0.97839457],
        [0.64719883],
        [0.25023229],
        [0.58578937],
        [0.59862196],
        [0.58073132],
        [0.59763772],
        [0.37644651],
        [0.78942836],
        [0.34211186],
        [0.98562603],
        [0.60653072],
        [0.32535552],
        [0.89167843],
        [0.71274442],
        [0.5805552],
        [0.33217253],
        [0.64401503],
        [0.76976464],
        [0.55581539],
        [0.72782257],
        [0.85718853],
        [0.57431324],
        [0.59714169],
        [0.42098636],
        [0.61625128],
        [0.76086529],
        [0.63982576],
        [0.70551115],
        [0.98376348],
        [0.71130656],
        [0.96957553],
        [0.71873032],
        [0.76901864],
        [0.8951517],
        [0.98253049],
        [0.29940514],
        [0.95179316],
        [0.48527039],
        [0.88222216],
        [0.8300751],
        [0.30727087],
        [0.65949074],
        [0.21619089],
        [0.56182804],
        [0.95370385],
        [0.75654749],
        [0.8578827],
        [0.97662979],
        [0.68802455],
        [0.97065395],
        [0.35662791],
        [0.22826964],
        [0.91288943],
        [0.63289013],
        [0.84328376],
        [0.839162],
    ])
    np.testing.assert_array_almost_equal(
        wi, expected_wi, decimal=2
    )


def test_gwr_kernel_euclidean_bisquare(euclidean_dataset):
    gwrKernel = GwrKernel(euclidean_dataset, 'bisquare')
    gwrKernel.update_bandwidth(40)
    wi = gwrKernel.get_weighted_matrix_by_id(0)
    expected_wi = np.array([
        [1.00000000e+00],
        [4.79083228e-01],
        [9.37989360e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [3.45250800e-01],
        [1.21438331e-01],
        [0.00000000e+00],
        [3.99999881e-14],
        [4.60360259e-01],
        [0.00000000e+00],
        [2.27901547e-01],
        [1.53517420e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [5.11920222e-02],
        [3.20514450e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [1.92013837e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [1.15275391e-01],
        [0.00000000e+00],
        [6.31292720e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [1.63611258e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [6.26973149e-03],
        [0.00000000e+00],
        [1.56912659e-01],
        [5.27110433e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [1.41369633e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [2.38407687e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [9.02994033e-01],
        [0.00000000e+00],
        [6.20469271e-07],
        [4.78227136e-02],
        [0.00000000e+00],
        [0.00000000e+00],
        [5.97420539e-02],
        [1.45783722e-01],
        [0.00000000e+00],
        [3.87982057e-01],
        [0.00000000e+00],
        [5.34825031e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [1.90846783e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [6.81170570e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [7.81843651e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [6.91595291e-03],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [7.55322963e-01],
        [0.00000000e+00],
        [5.66891240e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [1.30533049e-02],
        [7.37991190e-01],
        [0.00000000e+00],
        [3.65897676e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00],
        [3.85556676e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [6.57547817e-01],
        [0.00000000e+00],
        [5.80356683e-01],
        [0.00000000e+00],
        [0.00000000e+00],
        [7.35288198e-02],
        [0.00000000e+00],
        [0.00000000e+00],
        [0.00000000e+00]
    ])
    np.testing.assert_array_almost_equal(
        wi, expected_wi, decimal=2)
